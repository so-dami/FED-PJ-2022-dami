// 04. React 컴포넌트 jsx

// import시 CDN에서도 js/jsx 확장자는 생략 가능함
import Avengers from "./Avengers";

/********************************************************************* 
    [ React 컴포넌트 ]
    - 컴포넌트는 html 요소를 반환하는 함수


    [ 특징 ]

    1. 독립적
    2. 재사용이 가능한 코드 집합
    3. js함수와 비슷하지만 html 코드 반환이 필수인 점이 다름
    4. 컴포넌트는 다음 2가지로 생성 가능
        (1) 클래스형 컴포넌트
            -> 클래스형 컴포넌트는 리액트 초중기에 주로 사용되었으나
            React 16.8ver에서 Hooks와 함께는 더이상 사용되지 않음
            Hooks는 함수형 컴포넌트에서만 사용 가능함

        (2) 함수형 컴포넌트
            -> 우리는 함수형 컴포넌트를 주로 학습할 예정
    __________________________________________________________________

    [ 첫 번째 컴포넌트 만들기 ]
    React 컴포넌트 이름은 반드시 첫 글자를 대문자로 만듦(안 지키면 적용 안 됨)


    [ 클래스 컴포넌트 ]

    1. 클래스 컴포넌트에서는 extends React.Component 상속문이 포함되어야 함
        -> 컴포넌트에서도 메서드가 필요함

    2. render() 메서드는 html을 반환함
        -> 함수형 컴포넌트의 return 키워드를 사용할 수 있게 하는 역할을 함

*********************************************************************/
// 클래스형 컴포넌트 만들기
class Gogh extends React.Component{

    // render() 메서드 사용
    render(){

        // html 태그 리턴
        return(

            // root 만들기
            <React.Fragment>
                <h2>고흐 그림</h2>
                <img src="./images/01.png" alt="고흐1" />
                {/* 홀로 태그는 반드시 끝에 닫아줌 */}
            </React.Fragment>

        );

    } // render 메서드 //
    
} // Gogh 컴포넌트 //

// 랜더링
const root1 = ReactDOM.createRoot(document.getElementById("root1"));

// render(출력 요소)
// 출력 요소 -> 클래스를 호출하면 구성된 태그가 들어옴
// 클래스 호출법: <클래스명 />
// -> /> 혼자 닫기
root1.render(<Gogh />);

// 함수형 컴포넌트 만들기
// 첫 글자는 대문자로
function IronMan(){

    return (<div>
        <h2>i'm Iron Man.</h2>
        <img src="./images/ab1.jpg" alt="아이언맨" />
    </div>);
    
} // IronMan 컴포넌트 //

// 랜더링
ReactDOM.render(<IronMan />,document.querySelector("#root2"));

/****************************************************** 
    [ Props 사용하기 ]

    1. props는 properties에서 나온 말
    2. 속성들.. 즉, 변수에 값을 할당하여 전달하는 방법
    3. 함수의 전달값과 같고 속성으로 컴포넌트에 보냄
        -> props는 05번 다음 번에 자세히 다룰 예정
******************************************************/
// 내가 좋아하는 색 표시하기 컴포넌트
// props - 속성 셋팅 변수 집합
function Favorite(props){

    return(<h2>
        좋아하는 색: {props.color} <br />
        좋아하는 음식: {props.food} <br />
        취미: {props.hobby} <br />
        알겠니?
    </h2>);
    
} // Favorite 컴포넌트 //

/****************************************************** 
    [ 좋아하는 색을 props로 전달하기 ]
******************************************************/
// 함수 컴포넌트에서는 표현식 안에서 {props.호출 시 사용한 속성명}
// 여기서는 {props.color} 이런 형식으로 사용
ReactDOM.render(<Favorite color="보라색" food="칼국수" hobby="몰라도 됨" />,document.querySelector("#root3"));

// 컴포넌트 재사용
ReactDOM.render(<Favorite color="노란색" food="떡볶이" hobby="메롱" />,document.querySelector("#root4"));

/****************************************************** 
    [ 컴포넌트 내부에서 다른 컴포넌트 호출하기 ]
******************************************************/
function Who(){

    return(<div>
        <h1>김OO가 누구야?</h1>
        {/* 다른 컴포넌트 넣기 */}
        <Ans />
    </div>);
    
} // Who 컴포넌트 //

// 컴포넌트 내부에서 호출할 컴포넌트
function Ans(){

    return(<h2>
        김씨가 팔이 부러졌대
    </h2>);
    
} // Ans 컴포넌트 //

// 랜더링
ReactDOM.render(<Who />,document.querySelector("#root5"));

/************************************************************************* 
    [ 컴포넌트의 파일분리 ]

    리액트는 코드를 재사용하는 것이므로 컴포넌트를 별도의 파일로 분할 하는것 일반적임


    [ 분할 방법 ]

    1. jsx의 새파일 생성
    2. 대문자로 시작하는 컴포넌트를 구현
    3. 분할 구현된 jsx파일을 import하여 호출

    -> 일반적으로 js파일 상단에 import 키워드로 불러오면 되는데 지금 사용하는 CDN방식의 바벨 모듈에서는 주의사항이 있으니 참고할 것 (아래)

*************************************************************************/
// 어벤저스 컴포넌트 랜더링
ReactDOM.render(<Avengers />,document.querySelector("#root6"));

/*************************************************************************

    [ 바벨을 사용할 때 모듈로 파일 호출 시 주의사항 ]
    ____________________________________________

    설치형이 아닌 CDN방식의 바벨은 호출셋업의 시차로 바로 모듈을 호출하면 에러가 발생하므로 모듈을 사용할 파일을 아래와 같은 형식으로 메인 html 상단에 호출해 줘야 함

    -> 상단에 모듈화한 JS를 먼저 불러줌

    <script src="모듈화한js" 
    data-plugins="transform-es2015-modules-umd" 
    type="text/babel"></script>

    -> 아래쪽에 모듈을 호출하는 JS를 불러줌

    <script src="모듈을 호출하는 JS" 
    data-plugins="transform-es2015-modules-umd" 
    type="text/babel"></script>

    ->>> 위의 호출 속성 중 기본적으로 type="text/babel" 은 당연히 해야 하고

    ->>> 여기에 더하여 하나의 속성을 추가해줌
    data-plugins="transform-es2015-modules-umd"

    이 속성과 값이 바벨에서 모듈을 사용하게 하는 es2015 즉 ES6 버전에서의 모듈 문법을 사용하게끔 해준다!

  *************************************************************************/